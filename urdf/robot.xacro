<?xml version="1.0"?>

<!-- STL-version of the URDF, used with gazebo for dynamic simulation  -->

<robot name="my_robot" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:property name="PI" value="3.1415926535897931"/>

  <!-- Body properties -->
  <xacro:property name="body_top_mass"    value="25"/>
  <xacro:property name="body_bottom_mass" value="50"/>
  <xacro:property name="body_radius"      value="0.13"/>
  <xacro:property name="body_height"      value="0.7"/>
  <xacro:property name="body_width"       value="0.7"/>
  <xacro:property name="body_length"      value="1.5"/>
  <xacro:property name="X_cog"            value="-0.55"/>


  <!-- Plugin list -->
  <gazebo>
    <!-- Gazebo plugin listens to the body-->
    <plugin name="freefloating_gazebo_control" filename="libfreefloating_gazebo_control.so">

      <switchService>switch</switchService>
      <updateRate>100</updateRate>
      <link>base_link</link>

      <!-- for each thruster, give the map to XYZ+RPY and the maximum effort -->
      <thruster>
        <map>-1 0 0 0 0 ${-body_width/2}</map>
        <effort>30</effort>
      </thruster>
      <thruster>
        <map>-1 0 0 0 0 ${body_width/2}</map>
        <effort>30</effort>
      </thruster>
      <thruster>
        <map>0 1 0 0 0 0</map>
        <effort>30</effort>
      </thruster>
      <thruster>
        <map>0 0 -1 0 ${2*X_cog} 0</map>
        <effort>30</effort>
      </thruster>
      <thruster>
        <map>0 0 -1 0 ${-2*X_cog} 0</map>
        <effort>30</effort>
      </thruster>
    </plugin>
  </gazebo>


  <link name="base_link">
    <visual>
      <origin rpy="${-PI/2} 0 ${PI}" xyz="-0.2 0 0.75"/>
      <geometry>
        <mesh filename="package://freefloating_test/objects/g500_March11.stl"/>
      </geometry>
    </visual>

    <inertial>
      <origin xyz="${X_cog} 0 ${body_height*body_bottom_mass/(2*body_top_mass+body_bottom_mass)}" rpy="0 0 0"/>
      <mass value="${2*body_top_mass+body_bottom_mass}"/>
      <inertia
        ixx="${2*body_top_mass*(body_height*body_bottom_mass/(2*body_top_mass+body_bottom_mass)*body_height*body_bottom_mass/(2*body_top_mass+body_bottom_mass)+body_width*body_width/4)+body_bottom_mass*(body_height-body_height*body_bottom_mass/(2*body_top_mass+body_bottom_mass))*(body_height-body_height*body_bottom_mass/(2*body_top_mass+body_bottom_mass))+body_top_mass*body_radius*body_radius+(body_bottom_mass*body_radius*body_radius)/2}"
        ixy="0.0"
        ixz="0.0"
        iyy="${2*body_top_mass*body_height*body_bottom_mass/(2*body_top_mass+body_bottom_mass)*body_height*body_bottom_mass/(2*body_top_mass+body_bottom_mass)+body_bottom_mass*(body_height-body_height*body_bottom_mass/(2*body_top_mass+body_bottom_mass))*(body_height-body_height*body_bottom_mass/(2*body_top_mass+body_bottom_mass))+2*body_top_mass*(body_radius*body_radius/4+body_length*body_length/12)+body_bottom_mass*(body_radius*body_radius/4+body_length*body_length/12)}"
        iyz="${-body_top_mass*body_width*body_height*body_bottom_mass/(2*body_top_mass+body_bottom_mass)}"
        izz="${(body_top_mass*body_width*body_width)/2+2*body_top_mass*(body_radius*body_radius/4+body_length*body_length/12)+body_bottom_mass*(body_radius*body_radius/4+body_length*body_length/12)}"/>
    </inertial>

    <buoyancy>
      <compensation>1.01</compensation>
      <origin xyz= "${X_cog} 0 ${body_height*body_bottom_mass/(2*body_top_mass+body_bottom_mass)/2}"/>
      <limit radius=".5"/>
      <damping xyz="60 100 100" rpy="20 50 50"/>
    </buoyancy>
  </link>

  <gazebo reference="base_link">
    <material>Gazebo/Black</material>
  </gazebo>


  <!-- Include arm -->
  <xacro:include filename="arm.xacro"/>
</robot>
