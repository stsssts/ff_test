<?xml version="1.0"?>

<!-- STL-version of the URDF, used with gazebo for dynamic simulation  -->

<robot name="my_robot" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:property name="PI" value="3.1415926535897931"/>

  <!-- Body properties -->
  <xacro:property name="body_mass"   value="2.9"/>
  <xacro:property name="body_length" value="0.4"/>
  <xacro:property name="body_width"  value="0.2"/>
  <xacro:property name="body_heigth" value="0.08"/>

  <xacro:property name="thr2_y" value="0.278"/>

  <!-- Thruster link -->
  <xacro:macro name="thruster_dummy_link" params="name xyz rpy">
    <joint name="${name}" type="fixed">
      <parent link="base_link"/>
      <child link="${name}"/>
      <origin rpy="${rpy}" xyz="${xyz}"/>
    </joint>

    <link name="${name}">
      <buoyancy><compensation>1.0</compensation></buoyancy>
      <visual name="${name}">
        <geometry>
            <cylinder length=".02" radius=".045"/>
        </geometry>
      </visual>

      <inertial>
        <mass value=".05"/>
        <inertia
            ixx=".1"
            ixy="0.0"
            ixz="0.0"
            iyy=".1"
            iyz="0.0"
            izz=".1"/>
        </inertial>
    </link>

    <gazebo reference="${name}">
      <material>Gazebo/Black</material>
    </gazebo>
  </xacro:macro>

  <!-- Plugin list -->
  <gazebo>
    <!-- Gazebo plugin listens to the body-->
    <plugin name="freefloating_gazebo_control" filename="libfreefloating_gazebo_control.so">

      <switchService>switch</switchService>
      <updateRate>100</updateRate>
      <link>base_link</link>

      <!-- for each thruster, give the map to XYZ+RPY and the maximum effort -->
      <thruster>
          <effort>30</effort>
          <name>thr1</name>
          <map>0 0 1 0 ${body_length/2} 0</map>
      </thruster>
      <thruster>
          <effort>30</effort>
          <name>thr_r</name>
          <map>1 0 0 0 0 ${body_width/2}</map>
      </thruster>
      <thruster>
          <effort>30</effort>
          <name>thr_l</name>
          <map>1 0 0 0 0 ${-body_width/2}</map>
      </thruster>

    </plugin>
  </gazebo>

  <link name="base_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${body_length} ${body_width} ${body_heigth}"/>
      </geometry>

      <material name="black">
        <color rgba="0 0 0 1"/>
      </material>
    </visual>

    <inertial>
      <origin xyz="0 0 0" rpy="0 ${-PI/2} 0"/>
      <mass value="${body_mass}"/>
      <inertia
        ixx="${0.083*body_mass*(body_width*body_width+body_heigth*body_heigth)}"
        ixy="0.0"
        ixz="0.0"
        iyy="${0.083*body_mass*(body_length*body_length+body_heigth*body_heigth)}"
        iyz="0.0"
        izz="${0.083*body_mass*(body_length*body_length+body_width*body_width)}"/>
    </inertial>

    <buoyancy>
      <compensation>1.01</compensation>
      <origin xyz= "0 0 0"/>
      <limit radius="${body_heigth}"/>
      <damping xyz="6 100 100" rpy="20 50 50"/>
    </buoyancy>
  </link>

  <!-- Dummy links to display wrench in Rviz, autogenerated -->
  <xacro:thruster_dummy_link name="thr1" xyz="-0.27 0.0 0.0" rpy="0.0 0.0 0.0"/>
  <xacro:thruster_dummy_link name="thr_r" xyz="0.21 0.05 0.0" rpy="0.0 ${PI/2} 0.0"/>
  <xacro:thruster_dummy_link name="thr_l" xyz="0.21 -0.05 0.0" rpy="0.0 ${PI/2} 0.0"/>
</robot>
